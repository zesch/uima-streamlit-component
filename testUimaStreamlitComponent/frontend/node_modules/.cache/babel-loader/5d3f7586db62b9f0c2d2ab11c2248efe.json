{"ast":null,"code":"var _jsxFileName = \"/home/abtera/PycharmProjects/StreamlitComponentTest/my_component/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      numClicks: 0,\n      isFocused: false,\n      uploadedFile: null\n    };\n\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"];\n      const type = this.props.args[\"type\"];\n      const content = this.props.args[\"content\"]; // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n\n      const {\n        theme\n      } = this.props;\n      const style = {}; // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      } // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 5\n        }\n      }, \"The file name is: \", name, \" \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 34\n        }\n      }), \"The file type is: \", type, \" \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 34\n        }\n      }), \"The content is: \", /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }\n      }, content)) //       <span>\n      //         Hello, {name}! &nbsp;\n      //         <button\n      //           style={style}\n      //           onClick={this.onClicked}\n      //           disabled={this.props.disabled}\n      //           onFocus={this._onFocus}\n      //           onBlur={this._onBlur}\n      //         >\n      //           Click Me!\n      //         </button>\n      //       </span>\n      ;\n    };\n\n    this.onClicked = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      this.setState(prevState => ({\n        numClicks: prevState.numClicks + 1\n      }), () => Streamlit.setComponentValue(this.state.numClicks));\n    };\n\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(MyComponent);","map":{"version":3,"sources":["/home/abtera/PycharmProjects/StreamlitComponentTest/my_component/frontend/src/MyComponent.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","MyComponent","state","numClicks","isFocused","uploadedFile","render","name","props","args","type","content","theme","style","borderStyling","primaryColor","border","outline","onClicked","setState","prevState","setComponentValue","_onFocus","_onBlur"],"mappings":";AAAA,SACEA,SADF,EAEEC,sBAFF,EAGEC,uBAHF,QAIO,yBAJP;AAKA,OAAOC,KAAP,MAAiC,OAAjC;;AAOA;AACA;AACA;AACA;AACA,MAAMC,WAAN,SAA0BH,sBAA1B,CAAwD;AAAA;AAAA;AAAA,SAC/CI,KAD+C,GACvC;AAAEC,MAAAA,SAAS,EAAE,CAAb;AAAgBC,MAAAA,SAAS,EAAE,KAA3B;AAAkCC,MAAAA,YAAY,EAAE;AAAhD,KADuC;;AAAA,SAE/CC,MAF+C,GAEtC,MAAiB;AAC/B;AACA;AACA,YAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAb;AACA,YAAMC,IAAI,GAAG,KAAKF,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAb;AACA,YAAME,OAAO,GAAG,KAAKH,KAAL,CAAWC,IAAX,CAAgB,SAAhB,CAAhB,CAL+B,CAO/B;AACA;AACA;;AACA,YAAM;AAAEG,QAAAA;AAAF,UAAY,KAAKJ,KAAvB;AACA,YAAMK,KAA0B,GAAG,EAAnC,CAX+B,CAa/B;AACA;;AACA,UAAID,KAAJ,EAAW;AACT;AACA;AACA,cAAME,aAAa,GAAI,aACrB,KAAKZ,KAAL,CAAWE,SAAX,GAAuBQ,KAAK,CAACG,YAA7B,GAA4C,MAC7C,EAFD;AAGAF,QAAAA,KAAK,CAACG,MAAN,GAAeF,aAAf;AACAD,QAAAA,KAAK,CAACI,OAAN,GAAgBH,aAAhB;AACD,OAvB8B,CAyB/B;AACA;AACA;AACA;;;AACA,0BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACuBP,IADvB,oBAC6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD7B,wBAEuBG,IAFvB,oBAE6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAF7B,mCAGoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIC,OAAJ,CAHpB,CADA,CAQJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBI;AAqBD,KApDqD;;AAAA,SAuD9CO,SAvD8C,GAuDlC,MAAY;AAC9B;AACA;AACA,WAAKC,QAAL,CACEC,SAAS,KAAK;AAAEjB,QAAAA,SAAS,EAAEiB,SAAS,CAACjB,SAAV,GAAsB;AAAnC,OAAL,CADX,EAEE,MAAMN,SAAS,CAACwB,iBAAV,CAA4B,KAAKnB,KAAL,CAAWC,SAAvC,CAFR;AAID,KA9DqD;;AAAA,SAiE9CmB,QAjE8C,GAiEnC,MAAY;AAC7B,WAAKH,QAAL,CAAc;AAAEf,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD,KAnEqD;;AAAA,SAsE9CmB,OAtE8C,GAsEpC,MAAY;AAC5B,WAAKJ,QAAL,CAAc;AAAEf,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD,KAxEqD;AAAA;;AAAA,C,CA2ExD;AACA;AACA;AACA;AACA;;;AACA,eAAeL,uBAAuB,CAACE,WAAD,CAAtC","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false, uploadedFile: null}\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n    const type = this.props.args[\"type\"]\n    const content = this.props.args[\"content\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n    <span>\n        The file name is: {name} <br></br>\n        The file type is: {type} <br></br>\n        The content is: <b>{content}</b>\n    </span>\n\n\n//       <span>\n//         Hello, {name}! &nbsp;\n//         <button\n//           style={style}\n//           onClick={this.onClicked}\n//           disabled={this.props.disabled}\n//           onFocus={this._onFocus}\n//           onBlur={this._onBlur}\n//         >\n//           Click Me!\n//         </button>\n//       </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n"]},"metadata":{},"sourceType":"module"}