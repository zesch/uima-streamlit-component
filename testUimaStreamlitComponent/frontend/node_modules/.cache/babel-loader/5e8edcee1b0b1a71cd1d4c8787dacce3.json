{"ast":null,"code":"import _classCallCheck from\"/home/abtera/PycharmProjects/StreamlitComponentTest/xmi_app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/home/abtera/PycharmProjects/StreamlitComponentTest/xmi_app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/abtera/PycharmProjects/StreamlitComponentTest/xmi_app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */var XMIApp=/*#__PURE__*/function(_StreamlitComponentBa){_inherits(XMIApp,_StreamlitComponentBa);var _super=_createSuper(XMIApp);function XMIApp(){var _this;_classCallCheck(this,XMIApp);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={numClicks:0,isFocused:false,uploadedFile:null};_this.render=function(){// Arguments that are passed to the plugin in Python are accessible\n// via `this.props.args`. Here, we access the \"name\" arg.\nvar name=_this.props.args[\"name\"];var type=_this.props.args[\"type\"];var content=_this.props.args[\"content\"];// Streamlit sends us a theme object via props that we can use to ensure\n// that our component has visuals that match the active theme in a\n// streamlit app.\nvar theme=_this.props.theme;var style={};// Maintain compatibility with older versions of Streamlit that don't send\n// a theme object.\nif(theme){// Use the theme object to style our button border. Alternatively, the\n// theme style is defined in CSS vars.\nvar borderStyling=\"1px solid \".concat(_this.state.isFocused?theme.primaryColor:\"gray\");style.border=borderStyling;style.outline=borderStyling;}// Show a button and some text.\n// When the button is clicked, we'll increment our \"numClicks\" state\n// variable, and send its new value back to Streamlit, where it'll\n// be available to the Python program.\nreturn/*#__PURE__*/React.createElement(\"span\",null,\"The file name is: \",name,\" \",/*#__PURE__*/React.createElement(\"br\",null),\"The file type is: \",type,\" \",/*#__PURE__*/React.createElement(\"br\",null),\"The content is: \",/*#__PURE__*/React.createElement(\"div\",{dangerouslySetInnerHTML:{__html:content}}))//       <span>\n//         Hello, {name}! &nbsp;\n//         <button\n//           style={style}\n//           onClick={this.onClicked}\n//           disabled={this.props.disabled}\n//           onFocus={this._onFocus}\n//           onBlur={this._onBlur}\n//         >\n//           Click Me!\n//         </button>\n//       </span>\n;};_this.onClicked=function(){// Increment state.numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\n_this.setState(function(prevState){return{numClicks:prevState.numClicks+1};},function(){return Streamlit.setComponentValue(_this.state.numClicks);});};_this._onFocus=function(){_this.setState({isFocused:true});};_this._onBlur=function(){_this.setState({isFocused:false});};return _this;}return XMIApp;}(StreamlitComponentBase);// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(XMIApp);","map":{"version":3,"sources":["/home/abtera/PycharmProjects/StreamlitComponentTest/xmi_app/frontend/src/XMIApp.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","XMIApp","state","numClicks","isFocused","uploadedFile","render","name","props","args","type","content","theme","style","borderStyling","primaryColor","border","outline","__html","onClicked","setState","prevState","setComponentValue","_onFocus","_onBlur"],"mappings":"qiBAAA,OACEA,SADF,CAEEC,sBAFF,CAGEC,uBAHF,KAIO,yBAJP,CAKA,MAAOC,CAAAA,KAAP,KAAiC,OAAjC,CAOA;AACA;AACA;AACA,G,GACMC,CAAAA,M,iVACGC,K,CAAQ,CAAEC,SAAS,CAAE,CAAb,CAAgBC,SAAS,CAAE,KAA3B,CAAkCC,YAAY,CAAE,IAAhD,C,OACRC,M,CAAS,UAAiB,CAC/B;AACA;AACA,GAAMC,CAAAA,IAAI,CAAG,MAAKC,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAb,CACA,GAAMC,CAAAA,IAAI,CAAG,MAAKF,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAb,CACA,GAAME,CAAAA,OAAO,CAAG,MAAKH,KAAL,CAAWC,IAAX,CAAgB,SAAhB,CAAhB,CAEA;AACA;AACA;AACA,GAAQG,CAAAA,KAAR,CAAkB,MAAKJ,KAAvB,CAAQI,KAAR,CACA,GAAMC,CAAAA,KAA0B,CAAG,EAAnC,CAEA;AACA;AACA,GAAID,KAAJ,CAAW,CACT;AACA;AACA,GAAME,CAAAA,aAAa,qBACjB,MAAKZ,KAAL,CAAWE,SAAX,CAAuBQ,KAAK,CAACG,YAA7B,CAA4C,MAD3B,CAAnB,CAGAF,KAAK,CAACG,MAAN,CAAeF,aAAf,CACAD,KAAK,CAACI,OAAN,CAAgBH,aAAhB,CACD,CAED;AACA;AACA;AACA;AACA,mBACA,qDACuBP,IADvB,kBAC6B,8BAD7B,sBAEuBG,IAFvB,kBAE6B,8BAF7B,iCAGoB,2BAAK,uBAAuB,CAAE,CAACQ,MAAM,CAAEP,OAAT,CAA9B,EAHpB,CAOJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBI,CAqBD,C,OAGOQ,S,CAAY,UAAY,CAC9B;AACA;AACA,MAAKC,QAAL,CACE,SAAAC,SAAS,QAAK,CAAElB,SAAS,CAAEkB,SAAS,CAAClB,SAAV,CAAsB,CAAnC,CAAL,EADX,CAEE,iBAAMN,CAAAA,SAAS,CAACyB,iBAAV,CAA4B,MAAKpB,KAAL,CAAWC,SAAvC,CAAN,EAFF,EAID,C,OAGOoB,Q,CAAW,UAAY,CAC7B,MAAKH,QAAL,CAAc,CAAEhB,SAAS,CAAE,IAAb,CAAd,EACD,C,OAGOoB,O,CAAU,UAAY,CAC5B,MAAKJ,QAAL,CAAc,CAAEhB,SAAS,CAAE,KAAb,CAAd,EACD,C,+BAxEkBN,sB,EA2ErB;AACA;AACA;AACA;AACA;AACA,cAAeC,CAAAA,uBAAuB,CAACE,MAAD,CAAtC","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass XMIApp extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false, uploadedFile: null}\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n    const type = this.props.args[\"type\"]\n    const content = this.props.args[\"content\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n    <span>\n        The file name is: {name} <br></br>\n        The file type is: {type} <br></br>\n        The content is: <div dangerouslySetInnerHTML={{__html: content}} />\n    </span>\n\n\n//       <span>\n//         Hello, {name}! &nbsp;\n//         <button\n//           style={style}\n//           onClick={this.onClicked}\n//           disabled={this.props.disabled}\n//           onFocus={this._onFocus}\n//           onBlur={this._onBlur}\n//         >\n//           Click Me!\n//         </button>\n//       </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(XMIApp)\n"]},"metadata":{},"sourceType":"module"}