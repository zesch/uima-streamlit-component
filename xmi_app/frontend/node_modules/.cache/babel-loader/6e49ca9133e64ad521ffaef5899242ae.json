{"ast":null,"code":"var _jsxFileName = \"/Users/jeanette/PycharmProjects/uima-streamlit-component-master/xmi_app/frontend/src/XMIApp.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n * run with npm run start\n */\nclass XMIApp extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      numClicks: 0,\n      isFocused: false,\n      uploadedFile: null\n    };\n\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"];\n      const type = this.props.args[\"type\"];\n      const content = this.props.args[\"content\"]; // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n\n      const {\n        theme\n      } = this.props;\n      const style = {}; // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      } //Access variables like this:\n      //The file name is: {name} <br></br>\n      //   The file type is: {type} <br></br>\n      //    The content is: <div dangerouslySetInnerHTML={{__html: content}} />\n\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    this.onClicked = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      this.setState(prevState => ({\n        numClicks: prevState.numClicks + 1\n      }), () => Streamlit.setComponentValue(this.state.numClicks));\n    };\n\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(XMIApp);","map":{"version":3,"sources":["/Users/jeanette/PycharmProjects/uima-streamlit-component-master/xmi_app/frontend/src/XMIApp.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","XMIApp","state","numClicks","isFocused","uploadedFile","render","name","props","args","type","content","theme","style","borderStyling","primaryColor","border","outline","onClicked","setState","prevState","setComponentValue","_onFocus","_onBlur"],"mappings":";AAAA,SACEA,SADF,EAEEC,sBAFF,EAGEC,uBAHF,QAIO,yBAJP;AAKA,OAAOC,KAAP,MAAiC,OAAjC;;AAOA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAN,SAAqBH,sBAArB,CAAmD;AAAA;AAAA;AAAA,SAC1CI,KAD0C,GAClC;AAAEC,MAAAA,SAAS,EAAE,CAAb;AAAgBC,MAAAA,SAAS,EAAE,KAA3B;AAAkCC,MAAAA,YAAY,EAAE;AAAhD,KADkC;;AAAA,SAE1CC,MAF0C,GAEjC,MAAiB;AAC/B;AACA;AACA,YAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAb;AACA,YAAMC,IAAI,GAAG,KAAKF,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAb;AACA,YAAME,OAAO,GAAG,KAAKH,KAAL,CAAWC,IAAX,CAAgB,SAAhB,CAAhB,CAL+B,CAO/B;AACA;AACA;;AACA,YAAM;AAAEG,QAAAA;AAAF,UAAY,KAAKJ,KAAvB;AACA,YAAMK,KAA0B,GAAG,EAAnC,CAX+B,CAa/B;AACA;;AACA,UAAID,KAAJ,EAAW;AACT;AACA;AACA,cAAME,aAAa,GAAI,aACrB,KAAKZ,KAAL,CAAWE,SAAX,GAAuBQ,KAAK,CAACG,YAA7B,GAA4C,MAC7C,EAFD;AAGAF,QAAAA,KAAK,CAACG,MAAN,GAAeF,aAAf;AACAD,QAAAA,KAAK,CAACI,OAAN,GAAgBH,aAAhB;AACD,OAvB8B,CAyB/B;AACA;AACA;AACA;;;AAEA,0BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADA;AAOD,KAvCgD;;AAAA,SA0CzCI,SA1CyC,GA0C7B,MAAY;AAC9B;AACA;AACA,WAAKC,QAAL,CACEC,SAAS,KAAK;AAAEjB,QAAAA,SAAS,EAAEiB,SAAS,CAACjB,SAAV,GAAsB;AAAnC,OAAL,CADX,EAEE,MAAMN,SAAS,CAACwB,iBAAV,CAA4B,KAAKnB,KAAL,CAAWC,SAAvC,CAFR;AAID,KAjDgD;;AAAA,SAoDzCmB,QApDyC,GAoD9B,MAAY;AAC7B,WAAKH,QAAL,CAAc;AAAEf,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD,KAtDgD;;AAAA,SAyDzCmB,OAzDyC,GAyD/B,MAAY;AAC5B,WAAKJ,QAAL,CAAc;AAAEf,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD,KA3DgD;AAAA;;AAAA,C,CA8DnD;AACA;AACA;AACA;AACA;;;AACA,eAAeL,uBAAuB,CAACE,MAAD,CAAtC","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n * run with npm run start\n */\nclass XMIApp extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false, uploadedFile: null}\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n    const type = this.props.args[\"type\"]\n    const content = this.props.args[\"content\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    //Access variables like this:\n    //The file name is: {name} <br></br>\n    //   The file type is: {type} <br></br>\n    //    The content is: <div dangerouslySetInnerHTML={{__html: content}} />\n\n    return (\n    <span>\n        <br></br>\n        <br></br>\n    </span>\n\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(XMIApp)\n"]},"metadata":{},"sourceType":"module"}