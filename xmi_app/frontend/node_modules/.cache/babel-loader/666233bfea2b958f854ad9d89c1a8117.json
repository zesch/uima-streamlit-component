{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeanette/PycharmProjects/uima-streamlit-component-master/xmi_app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jeanette/PycharmProjects/uima-streamlit-component-master/xmi_app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/jeanette/PycharmProjects/uima-streamlit-component-master/xmi_app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jeanette/PycharmProjects/uima-streamlit-component-master/xmi_app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/jeanette/PycharmProjects/uima-streamlit-component-master/xmi_app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/jeanette/PycharmProjects/uima-streamlit-component-master/xmi_app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { toUint8Array } from '../util/buffer';\n/** @ignore */\n\nexport var RandomAccessFile = /*#__PURE__*/function (_ByteStream) {\n  _inherits(RandomAccessFile, _ByteStream);\n\n  var _super = _createSuper(RandomAccessFile);\n\n  function RandomAccessFile(buffer, byteLength) {\n    var _this;\n\n    _classCallCheck(this, RandomAccessFile);\n\n    _this = _super.call(this);\n    _this.position = 0;\n    _this.buffer = toUint8Array(buffer);\n    _this.size = typeof byteLength === 'undefined' ? _this.buffer.byteLength : byteLength;\n    return _this;\n  }\n\n  _createClass(RandomAccessFile, [{\n    key: \"readInt32\",\n    value: function readInt32(position) {\n      var _this$readAt = this.readAt(position, 4),\n          buffer = _this$readAt.buffer,\n          byteOffset = _this$readAt.byteOffset;\n\n      return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n  }, {\n    key: \"seek\",\n    value: function seek(position) {\n      this.position = Math.min(position, this.size);\n      return position < this.size;\n    }\n  }, {\n    key: \"read\",\n    value: function read(nBytes) {\n      var buffer = this.buffer,\n          size = this.size,\n          position = this.position;\n\n      if (buffer && position < size) {\n        if (typeof nBytes !== 'number') {\n          nBytes = Infinity;\n        }\n\n        this.position = Math.min(size, position + Math.min(size - position, nBytes));\n        return buffer.subarray(position, this.position);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"readAt\",\n    value: function readAt(position, nBytes) {\n      var buf = this.buffer;\n      var end = Math.min(this.size, position + nBytes);\n      return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.buffer && (this.buffer = null);\n    }\n  }, {\n    key: \"throw\",\n    value: function _throw(value) {\n      this.close();\n      return {\n        done: true,\n        value: value\n      };\n    }\n  }, {\n    key: \"return\",\n    value: function _return(value) {\n      this.close();\n      return {\n        done: true,\n        value: value\n      };\n    }\n  }]);\n\n  return RandomAccessFile;\n}(ByteStream);\n/** @ignore */\n\nexport var AsyncRandomAccessFile = /*#__PURE__*/function (_AsyncByteStream) {\n  _inherits(AsyncRandomAccessFile, _AsyncByteStream);\n\n  var _super2 = _createSuper(AsyncRandomAccessFile);\n\n  function AsyncRandomAccessFile(file, byteLength) {\n    var _this2;\n\n    _classCallCheck(this, AsyncRandomAccessFile);\n\n    _this2 = _super2.call(this);\n    _this2.position = 0;\n    _this2._handle = file;\n\n    if (typeof byteLength === 'number') {\n      _this2.size = byteLength;\n    } else {\n      _this2._pending = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return file.stat();\n\n              case 2:\n                _this2.size = _context.sent.size;\n                delete _this2._pending;\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n\n    return _this2;\n  }\n\n  _createClass(AsyncRandomAccessFile, [{\n    key: \"readInt32\",\n    value: function () {\n      var _readInt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(position) {\n        var _yield$this$readAt, buffer, byteOffset;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.readAt(position, 4);\n\n              case 2:\n                _yield$this$readAt = _context2.sent;\n                buffer = _yield$this$readAt.buffer;\n                byteOffset = _yield$this$readAt.byteOffset;\n                return _context2.abrupt(\"return\", new DataView(buffer, byteOffset).getInt32(0, true));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function readInt32(_x) {\n        return _readInt.apply(this, arguments);\n      }\n\n      return readInt32;\n    }()\n  }, {\n    key: \"seek\",\n    value: function () {\n      var _seek = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(position) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.t0 = this._pending;\n\n                if (!_context3.t0) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                _context3.next = 4;\n                return this._pending;\n\n              case 4:\n                this.position = Math.min(position, this.size);\n                return _context3.abrupt(\"return\", position < this.size);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function seek(_x2) {\n        return _seek.apply(this, arguments);\n      }\n\n      return seek;\n    }()\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(nBytes) {\n        var file, size, position, pos, offset, bytesRead, end, buffer, _yield$file$read;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.t0 = this._pending;\n\n                if (!_context4.t0) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                _context4.next = 4;\n                return this._pending;\n\n              case 4:\n                file = this._handle, size = this.size, position = this.position;\n\n                if (!(file && position < size)) {\n                  _context4.next = 18;\n                  break;\n                }\n\n                if (typeof nBytes !== 'number') {\n                  nBytes = Infinity;\n                }\n\n                pos = position, offset = 0, bytesRead = 0;\n                end = Math.min(size, pos + Math.min(size - pos, nBytes));\n                buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n\n              case 10:\n                if (!((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength)) {\n                  _context4.next = 17;\n                  break;\n                }\n\n                _context4.next = 13;\n                return file.read(buffer, offset, buffer.byteLength - offset, pos);\n\n              case 13:\n                _yield$file$read = _context4.sent;\n                bytesRead = _yield$file$read.bytesRead;\n                _context4.next = 10;\n                break;\n\n              case 17:\n                return _context4.abrupt(\"return\", buffer);\n\n              case 18:\n                return _context4.abrupt(\"return\", null);\n\n              case 19:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function read(_x3) {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"readAt\",\n    value: function () {\n      var _readAt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(position, nBytes) {\n        var file, size, end, buffer;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.t0 = this._pending;\n\n                if (!_context5.t0) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                _context5.next = 4;\n                return this._pending;\n\n              case 4:\n                file = this._handle, size = this.size;\n\n                if (!(file && position + nBytes < size)) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                end = Math.min(size, position + nBytes);\n                buffer = new Uint8Array(end - position);\n                _context5.next = 10;\n                return file.read(buffer, 0, nBytes, position);\n\n              case 10:\n                return _context5.abrupt(\"return\", _context5.sent.buffer);\n\n              case 11:\n                return _context5.abrupt(\"return\", new Uint8Array(nBytes));\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function readAt(_x4, _x5) {\n        return _readAt.apply(this, arguments);\n      }\n\n      return readAt;\n    }()\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var f;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                f = this._handle;\n                this._handle = null;\n                _context6.t0 = f;\n\n                if (!_context6.t0) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                _context6.next = 6;\n                return f.close();\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n  }, {\n    key: \"throw\",\n    value: function () {\n      var _throw2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(value) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.close();\n\n              case 2:\n                return _context7.abrupt(\"return\", {\n                  done: true,\n                  value: value\n                });\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _throw(_x6) {\n        return _throw2.apply(this, arguments);\n      }\n\n      return _throw;\n    }()\n  }, {\n    key: \"return\",\n    value: function () {\n      var _return2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(value) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.close();\n\n              case 2:\n                return _context8.abrupt(\"return\", {\n                  done: true,\n                  value: value\n                });\n\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function _return(_x7) {\n        return _return2.apply(this, arguments);\n      }\n\n      return _return;\n    }()\n  }]);\n\n  return AsyncRandomAccessFile;\n}(AsyncByteStream);","map":{"version":3,"sources":["io/file.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                this.size = (await file.stat()).size;\n                delete this._pending;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n"]},"metadata":{},"sourceType":"module"}