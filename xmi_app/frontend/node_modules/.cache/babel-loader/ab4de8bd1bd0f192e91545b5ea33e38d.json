{"ast":null,"code":"/* tslint:disable:class-name */\n\n/**\n * @enum {number}\n */\nexport var org;\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        let MetadataVersion;\n\n        (function (MetadataVersion) {\n          /**\n           * 0.1.0\n           */\n          MetadataVersion[MetadataVersion[\"V1\"] = 0] = \"V1\";\n          /**\n           * 0.2.0\n           */\n\n          MetadataVersion[MetadataVersion[\"V2\"] = 1] = \"V2\";\n          /**\n           * 0.3.0 -> 0.7.1\n           */\n\n          MetadataVersion[MetadataVersion[\"V3\"] = 2] = \"V3\";\n          /**\n           * >= 0.8.0\n           */\n\n          MetadataVersion[MetadataVersion[\"V4\"] = 3] = \"V4\";\n        })(MetadataVersion = flatbuf.MetadataVersion || (flatbuf.MetadataVersion = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        let UnionMode;\n\n        (function (UnionMode) {\n          UnionMode[UnionMode[\"Sparse\"] = 0] = \"Sparse\";\n          UnionMode[UnionMode[\"Dense\"] = 1] = \"Dense\";\n        })(UnionMode = flatbuf.UnionMode || (flatbuf.UnionMode = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        let Precision;\n\n        (function (Precision) {\n          Precision[Precision[\"HALF\"] = 0] = \"HALF\";\n          Precision[Precision[\"SINGLE\"] = 1] = \"SINGLE\";\n          Precision[Precision[\"DOUBLE\"] = 2] = \"DOUBLE\";\n        })(Precision = flatbuf.Precision || (flatbuf.Precision = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        let DateUnit;\n\n        (function (DateUnit) {\n          DateUnit[DateUnit[\"DAY\"] = 0] = \"DAY\";\n          DateUnit[DateUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n        })(DateUnit = flatbuf.DateUnit || (flatbuf.DateUnit = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        let TimeUnit;\n\n        (function (TimeUnit) {\n          TimeUnit[TimeUnit[\"SECOND\"] = 0] = \"SECOND\";\n          TimeUnit[TimeUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n          TimeUnit[TimeUnit[\"MICROSECOND\"] = 2] = \"MICROSECOND\";\n          TimeUnit[TimeUnit[\"NANOSECOND\"] = 3] = \"NANOSECOND\";\n        })(TimeUnit = flatbuf.TimeUnit || (flatbuf.TimeUnit = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        let IntervalUnit;\n\n        (function (IntervalUnit) {\n          IntervalUnit[IntervalUnit[\"YEAR_MONTH\"] = 0] = \"YEAR_MONTH\";\n          IntervalUnit[IntervalUnit[\"DAY_TIME\"] = 1] = \"DAY_TIME\";\n        })(IntervalUnit = flatbuf.IntervalUnit || (flatbuf.IntervalUnit = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        let Type;\n\n        (function (Type) {\n          Type[Type[\"NONE\"] = 0] = \"NONE\";\n          Type[Type[\"Null\"] = 1] = \"Null\";\n          Type[Type[\"Int\"] = 2] = \"Int\";\n          Type[Type[\"FloatingPoint\"] = 3] = \"FloatingPoint\";\n          Type[Type[\"Binary\"] = 4] = \"Binary\";\n          Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n          Type[Type[\"Bool\"] = 6] = \"Bool\";\n          Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n          Type[Type[\"Date\"] = 8] = \"Date\";\n          Type[Type[\"Time\"] = 9] = \"Time\";\n          Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n          Type[Type[\"Interval\"] = 11] = \"Interval\";\n          Type[Type[\"List\"] = 12] = \"List\";\n          Type[Type[\"Struct_\"] = 13] = \"Struct_\";\n          Type[Type[\"Union\"] = 14] = \"Union\";\n          Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n          Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n          Type[Type[\"Map\"] = 17] = \"Map\";\n          Type[Type[\"Duration\"] = 18] = \"Duration\";\n          Type[Type[\"LargeBinary\"] = 19] = \"LargeBinary\";\n          Type[Type[\"LargeUtf8\"] = 20] = \"LargeUtf8\";\n          Type[Type[\"LargeList\"] = 21] = \"LargeList\";\n        })(Type = flatbuf.Type || (flatbuf.Type = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        let Endianness;\n\n        (function (Endianness) {\n          Endianness[Endianness[\"Little\"] = 0] = \"Little\";\n          Endianness[Endianness[\"Big\"] = 1] = \"Big\";\n        })(Endianness = flatbuf.Endianness || (flatbuf.Endianness = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Null {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Null\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Null= obj\n           * @returns Null\n           */\n\n\n          static getRootAsNull(bb, obj) {\n            return (obj || new Null()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startNull(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endNull(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createNull(builder) {\n            Null.startNull(builder);\n            return Null.endNull(builder);\n          }\n\n        }\n\n        flatbuf.Null = Null;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Struct_ {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Struct_\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Struct_= obj\n           * @returns Struct_\n           */\n\n\n          static getRootAsStruct_(bb, obj) {\n            return (obj || new Struct_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startStruct_(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endStruct_(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createStruct_(builder) {\n            Struct_.startStruct_(builder);\n            return Struct_.endStruct_(builder);\n          }\n\n        }\n\n        flatbuf.Struct_ = Struct_;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class List {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns List\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param List= obj\n           * @returns List\n           */\n\n\n          static getRootAsList(bb, obj) {\n            return (obj || new List()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startList(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endList(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createList(builder) {\n            List.startList(builder);\n            return List.endList(builder);\n          }\n\n        }\n\n        flatbuf.List = List;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class LargeList {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns LargeList\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param LargeList= obj\n           * @returns LargeList\n           */\n\n\n          static getRootAsLargeList(bb, obj) {\n            return (obj || new LargeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startLargeList(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endLargeList(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createLargeList(builder) {\n            LargeList.startLargeList(builder);\n            return LargeList.endLargeList(builder);\n          }\n\n        }\n\n        flatbuf.LargeList = LargeList;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class FixedSizeList {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FixedSizeList\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param FixedSizeList= obj\n           * @returns FixedSizeList\n           */\n\n\n          static getRootAsFixedSizeList(bb, obj) {\n            return (obj || new FixedSizeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * Number of list items per value\n           *\n           * @returns number\n           */\n\n\n          listSize() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startFixedSizeList(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number listSize\n           */\n\n\n          static addListSize(builder, listSize) {\n            builder.addFieldInt32(0, listSize, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endFixedSizeList(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createFixedSizeList(builder, listSize) {\n            FixedSizeList.startFixedSizeList(builder);\n            FixedSizeList.addListSize(builder, listSize);\n            return FixedSizeList.endFixedSizeList(builder);\n          }\n\n        }\n\n        flatbuf.FixedSizeList = FixedSizeList;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Map {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Map\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Map= obj\n           * @returns Map\n           */\n\n\n          static getRootAsMap(bb, obj) {\n            return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * Set to true if the keys within each value are sorted\n           *\n           * @returns boolean\n           */\n\n\n          keysSorted() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startMap(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param boolean keysSorted\n           */\n\n\n          static addKeysSorted(builder, keysSorted) {\n            builder.addFieldInt8(0, +keysSorted, +false);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endMap(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createMap(builder, keysSorted) {\n            Map.startMap(builder);\n            Map.addKeysSorted(builder, keysSorted);\n            return Map.endMap(builder);\n          }\n\n        }\n\n        flatbuf.Map = Map;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Union {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Union\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Union= obj\n           * @returns Union\n           */\n\n\n          static getRootAsUnion(bb, obj) {\n            return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.UnionMode\n           */\n\n\n          mode() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ?\n            /**  */\n            this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n          }\n          /**\n           * @param number index\n           * @returns number\n           */\n\n\n          typeIds(index) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n          }\n          /**\n           * @returns number\n           */\n\n\n          typeIdsLength() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @returns Int32Array\n           */\n\n\n          typeIdsArray() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startUnion(builder) {\n            builder.startObject(2);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.UnionMode mode\n           */\n\n\n          static addMode(builder, mode) {\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset typeIdsOffset\n           */\n\n\n          static addTypeIds(builder, typeIdsOffset) {\n            builder.addFieldOffset(1, typeIdsOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param Array.<number> data\n           * @returns flatbuffers.Offset\n           */\n\n\n          static createTypeIdsVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n\n            for (let i = data.length - 1; i >= 0; i--) {\n              builder.addInt32(data[i]);\n            }\n\n            return builder.endVector();\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n\n\n          static startTypeIdsVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endUnion(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createUnion(builder, mode, typeIdsOffset) {\n            Union.startUnion(builder);\n            Union.addMode(builder, mode);\n            Union.addTypeIds(builder, typeIdsOffset);\n            return Union.endUnion(builder);\n          }\n\n        }\n\n        flatbuf.Union = Union;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Int {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Int\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Int= obj\n           * @returns Int\n           */\n\n\n          static getRootAsInt(bb, obj) {\n            return (obj || new Int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns number\n           */\n\n\n          bitWidth() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @returns boolean\n           */\n\n\n          isSigned() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startInt(builder) {\n            builder.startObject(2);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number bitWidth\n           */\n\n\n          static addBitWidth(builder, bitWidth) {\n            builder.addFieldInt32(0, bitWidth, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param boolean isSigned\n           */\n\n\n          static addIsSigned(builder, isSigned) {\n            builder.addFieldInt8(1, +isSigned, +false);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endInt(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createInt(builder, bitWidth, isSigned) {\n            Int.startInt(builder);\n            Int.addBitWidth(builder, bitWidth);\n            Int.addIsSigned(builder, isSigned);\n            return Int.endInt(builder);\n          }\n\n        }\n\n        flatbuf.Int = Int;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class FloatingPoint {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FloatingPoint\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param FloatingPoint= obj\n           * @returns FloatingPoint\n           */\n\n\n          static getRootAsFloatingPoint(bb, obj) {\n            return (obj || new FloatingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.Precision\n           */\n\n\n          precision() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ?\n            /**  */\n            this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.Precision.HALF;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startFloatingPoint(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.Precision precision\n           */\n\n\n          static addPrecision(builder, precision) {\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endFloatingPoint(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createFloatingPoint(builder, precision) {\n            FloatingPoint.startFloatingPoint(builder);\n            FloatingPoint.addPrecision(builder, precision);\n            return FloatingPoint.endFloatingPoint(builder);\n          }\n\n        }\n\n        flatbuf.FloatingPoint = FloatingPoint;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Utf8 {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Utf8\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Utf8= obj\n           * @returns Utf8\n           */\n\n\n          static getRootAsUtf8(bb, obj) {\n            return (obj || new Utf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startUtf8(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endUtf8(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createUtf8(builder) {\n            Utf8.startUtf8(builder);\n            return Utf8.endUtf8(builder);\n          }\n\n        }\n\n        flatbuf.Utf8 = Utf8;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Opaque binary data\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Binary {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Binary\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Binary= obj\n           * @returns Binary\n           */\n\n\n          static getRootAsBinary(bb, obj) {\n            return (obj || new Binary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startBinary(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endBinary(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createBinary(builder) {\n            Binary.startBinary(builder);\n            return Binary.endBinary(builder);\n          }\n\n        }\n\n        flatbuf.Binary = Binary;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class LargeUtf8 {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns LargeUtf8\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param LargeUtf8= obj\n           * @returns LargeUtf8\n           */\n\n\n          static getRootAsLargeUtf8(bb, obj) {\n            return (obj || new LargeUtf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startLargeUtf8(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endLargeUtf8(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createLargeUtf8(builder) {\n            LargeUtf8.startLargeUtf8(builder);\n            return LargeUtf8.endLargeUtf8(builder);\n          }\n\n        }\n\n        flatbuf.LargeUtf8 = LargeUtf8;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class LargeBinary {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns LargeBinary\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param LargeBinary= obj\n           * @returns LargeBinary\n           */\n\n\n          static getRootAsLargeBinary(bb, obj) {\n            return (obj || new LargeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startLargeBinary(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endLargeBinary(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createLargeBinary(builder) {\n            LargeBinary.startLargeBinary(builder);\n            return LargeBinary.endLargeBinary(builder);\n          }\n\n        }\n\n        flatbuf.LargeBinary = LargeBinary;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class FixedSizeBinary {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FixedSizeBinary\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param FixedSizeBinary= obj\n           * @returns FixedSizeBinary\n           */\n\n\n          static getRootAsFixedSizeBinary(bb, obj) {\n            return (obj || new FixedSizeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * Number of bytes per value\n           *\n           * @returns number\n           */\n\n\n          byteWidth() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startFixedSizeBinary(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number byteWidth\n           */\n\n\n          static addByteWidth(builder, byteWidth) {\n            builder.addFieldInt32(0, byteWidth, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endFixedSizeBinary(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createFixedSizeBinary(builder, byteWidth) {\n            FixedSizeBinary.startFixedSizeBinary(builder);\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\n            return FixedSizeBinary.endFixedSizeBinary(builder);\n          }\n\n        }\n\n        flatbuf.FixedSizeBinary = FixedSizeBinary;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Bool {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Bool\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Bool= obj\n           * @returns Bool\n           */\n\n\n          static getRootAsBool(bb, obj) {\n            return (obj || new Bool()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startBool(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endBool(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createBool(builder) {\n            Bool.startBool(builder);\n            return Bool.endBool(builder);\n          }\n\n        }\n\n        flatbuf.Bool = Bool;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Decimal {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Decimal\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Decimal= obj\n           * @returns Decimal\n           */\n\n\n          static getRootAsDecimal(bb, obj) {\n            return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * Total number of decimal digits\n           *\n           * @returns number\n           */\n\n\n          precision() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n          }\n          /**\n           * Number of digits after the decimal point \".\"\n           *\n           * @returns number\n           */\n\n\n          scale() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startDecimal(builder) {\n            builder.startObject(2);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number precision\n           */\n\n\n          static addPrecision(builder, precision) {\n            builder.addFieldInt32(0, precision, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number scale\n           */\n\n\n          static addScale(builder, scale) {\n            builder.addFieldInt32(1, scale, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endDecimal(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createDecimal(builder, precision, scale) {\n            Decimal.startDecimal(builder);\n            Decimal.addPrecision(builder, precision);\n            Decimal.addScale(builder, scale);\n            return Decimal.endDecimal(builder);\n          }\n\n        }\n\n        flatbuf.Decimal = Decimal;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Date {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Date\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Date= obj\n           * @returns Date\n           */\n\n\n          static getRootAsDate(bb, obj) {\n            return (obj || new Date()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.DateUnit\n           */\n\n\n          unit() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ?\n            /**  */\n            this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startDate(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.DateUnit unit\n           */\n\n\n          static addUnit(builder, unit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endDate(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createDate(builder, unit) {\n            Date.startDate(builder);\n            Date.addUnit(builder, unit);\n            return Date.endDate(builder);\n          }\n\n        }\n\n        flatbuf.Date = Date;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Time {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Time\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Time= obj\n           * @returns Time\n           */\n\n\n          static getRootAsTime(bb, obj) {\n            return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.TimeUnit\n           */\n\n\n          unit() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ?\n            /**  */\n            this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n          }\n          /**\n           * @returns number\n           */\n\n\n          bitWidth() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startTime(builder) {\n            builder.startObject(2);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.TimeUnit unit\n           */\n\n\n          static addUnit(builder, unit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number bitWidth\n           */\n\n\n          static addBitWidth(builder, bitWidth) {\n            builder.addFieldInt32(1, bitWidth, 32);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endTime(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createTime(builder, unit, bitWidth) {\n            Time.startTime(builder);\n            Time.addUnit(builder, unit);\n            Time.addBitWidth(builder, bitWidth);\n            return Time.endTime(builder);\n          }\n\n        }\n\n        flatbuf.Time = Time;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Timestamp {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Timestamp\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Timestamp= obj\n           * @returns Timestamp\n           */\n\n\n          static getRootAsTimestamp(bb, obj) {\n            return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.TimeUnit\n           */\n\n\n          unit() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ?\n            /**  */\n            this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n          }\n\n          timezone(optionalEncoding) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startTimestamp(builder) {\n            builder.startObject(2);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.TimeUnit unit\n           */\n\n\n          static addUnit(builder, unit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset timezoneOffset\n           */\n\n\n          static addTimezone(builder, timezoneOffset) {\n            builder.addFieldOffset(1, timezoneOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endTimestamp(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createTimestamp(builder, unit, timezoneOffset) {\n            Timestamp.startTimestamp(builder);\n            Timestamp.addUnit(builder, unit);\n            Timestamp.addTimezone(builder, timezoneOffset);\n            return Timestamp.endTimestamp(builder);\n          }\n\n        }\n\n        flatbuf.Timestamp = Timestamp;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Interval {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Interval\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Interval= obj\n           * @returns Interval\n           */\n\n\n          static getRootAsInterval(bb, obj) {\n            return (obj || new Interval()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.IntervalUnit\n           */\n\n\n          unit() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ?\n            /**  */\n            this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startInterval(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.IntervalUnit unit\n           */\n\n\n          static addUnit(builder, unit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endInterval(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createInterval(builder, unit) {\n            Interval.startInterval(builder);\n            Interval.addUnit(builder, unit);\n            return Interval.endInterval(builder);\n          }\n\n        }\n\n        flatbuf.Interval = Interval;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Duration {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Duration\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Duration= obj\n           * @returns Duration\n           */\n\n\n          static getRootAsDuration(bb, obj) {\n            return (obj || new Duration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.TimeUnit\n           */\n\n\n          unit() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ?\n            /**  */\n            this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startDuration(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.TimeUnit unit\n           */\n\n\n          static addUnit(builder, unit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endDuration(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createDuration(builder, unit) {\n            Duration.startDuration(builder);\n            Duration.addUnit(builder, unit);\n            return Duration.endDuration(builder);\n          }\n\n        }\n\n        flatbuf.Duration = Duration;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class KeyValue {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns KeyValue\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param KeyValue= obj\n           * @returns KeyValue\n           */\n\n\n          static getRootAsKeyValue(bb, obj) {\n            return (obj || new KeyValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n\n          key(optionalEncoding) {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n          }\n\n          value(optionalEncoding) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startKeyValue(builder) {\n            builder.startObject(2);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset keyOffset\n           */\n\n\n          static addKey(builder, keyOffset) {\n            builder.addFieldOffset(0, keyOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset valueOffset\n           */\n\n\n          static addValue(builder, valueOffset) {\n            builder.addFieldOffset(1, valueOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endKeyValue(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createKeyValue(builder, keyOffset, valueOffset) {\n            KeyValue.startKeyValue(builder);\n            KeyValue.addKey(builder, keyOffset);\n            KeyValue.addValue(builder, valueOffset);\n            return KeyValue.endKeyValue(builder);\n          }\n\n        }\n\n        flatbuf.KeyValue = KeyValue;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class DictionaryEncoding {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns DictionaryEncoding\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param DictionaryEncoding= obj\n           * @returns DictionaryEncoding\n           */\n\n\n          static getRootAsDictionaryEncoding(bb, obj) {\n            return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * The known dictionary id in the application where this data is used. In\n           * the file or streaming formats, the dictionary ids are found in the\n           * DictionaryBatch messages\n           *\n           * @returns flatbuffers.Long\n           */\n\n\n          id() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n          }\n          /**\n           * The dictionary indices are constrained to be positive integers. If this\n           * field is null, the indices must be signed int32\n           *\n           * @param org.apache.arrow.flatbuf.Int= obj\n           * @returns org.apache.arrow.flatbuf.Int|null\n           */\n\n\n          indexType(obj) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n          }\n          /**\n           * By default, dictionaries are not ordered, or the order does not have\n           * semantic meaning. In some statistical, applications, dictionary-encoding\n           * is used to represent ordered categorical data, and we provide a way to\n           * preserve that metadata here\n           *\n           * @returns boolean\n           */\n\n\n          isOrdered() {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startDictionaryEncoding(builder) {\n            builder.startObject(3);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Long id\n           */\n\n\n          static addId(builder, id) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset indexTypeOffset\n           */\n\n\n          static addIndexType(builder, indexTypeOffset) {\n            builder.addFieldOffset(1, indexTypeOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param boolean isOrdered\n           */\n\n\n          static addIsOrdered(builder, isOrdered) {\n            builder.addFieldInt8(2, +isOrdered, +false);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endDictionaryEncoding(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createDictionaryEncoding(builder, id, indexTypeOffset, isOrdered) {\n            DictionaryEncoding.startDictionaryEncoding(builder);\n            DictionaryEncoding.addId(builder, id);\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\n            return DictionaryEncoding.endDictionaryEncoding(builder);\n          }\n\n        }\n\n        flatbuf.DictionaryEncoding = DictionaryEncoding;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Field {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Field\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Field= obj\n           * @returns Field\n           */\n\n\n          static getRootAsField(bb, obj) {\n            return (obj || new Field()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n\n          name(optionalEncoding) {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n          }\n          /**\n           * Whether or not this field can contain nulls. Should be true in general.\n           *\n           * @returns boolean\n           */\n\n\n          nullable() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.Type\n           */\n\n\n          typeType() {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n\n            return offset ?\n            /**  */\n            this.bb.readUint8(this.bb_pos + offset) : org.apache.arrow.flatbuf.Type.NONE;\n          }\n          /**\n           * This is the type of the decoded value if the field is dictionary encoded.\n           *\n           * @param flatbuffers.Table obj\n           * @returns ?flatbuffers.Table\n           */\n\n\n          type(obj) {\n            let offset = this.bb.__offset(this.bb_pos, 10);\n\n            return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n          }\n          /**\n           * Present only if the field is dictionary encoded.\n           *\n           * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n           * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n           */\n\n\n          dictionary(obj) {\n            let offset = this.bb.__offset(this.bb_pos, 12);\n\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n          }\n          /**\n           * children apply only to nested data types like Struct, List and Union. For\n           * primitive types children will have length 0.\n           *\n           * @param number index\n           * @param org.apache.arrow.flatbuf.Field= obj\n           * @returns org.apache.arrow.flatbuf.Field\n           */\n\n\n          children(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 14);\n\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n\n\n          childrenLength() {\n            let offset = this.bb.__offset(this.bb_pos, 14);\n\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * User-defined metadata\n           *\n           * @param number index\n           * @param org.apache.arrow.flatbuf.KeyValue= obj\n           * @returns org.apache.arrow.flatbuf.KeyValue\n           */\n\n\n          customMetadata(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 16);\n\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n\n\n          customMetadataLength() {\n            let offset = this.bb.__offset(this.bb_pos, 16);\n\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startField(builder) {\n            builder.startObject(7);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset nameOffset\n           */\n\n\n          static addName(builder, nameOffset) {\n            builder.addFieldOffset(0, nameOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param boolean nullable\n           */\n\n\n          static addNullable(builder, nullable) {\n            builder.addFieldInt8(1, +nullable, +false);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.Type typeType\n           */\n\n\n          static addTypeType(builder, typeType) {\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset typeOffset\n           */\n\n\n          static addType(builder, typeOffset) {\n            builder.addFieldOffset(3, typeOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset dictionaryOffset\n           */\n\n\n          static addDictionary(builder, dictionaryOffset) {\n            builder.addFieldOffset(4, dictionaryOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset childrenOffset\n           */\n\n\n          static addChildren(builder, childrenOffset) {\n            builder.addFieldOffset(5, childrenOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param Array.<flatbuffers.Offset> data\n           * @returns flatbuffers.Offset\n           */\n\n\n          static createChildrenVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n\n            for (let i = data.length - 1; i >= 0; i--) {\n              builder.addOffset(data[i]);\n            }\n\n            return builder.endVector();\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n\n\n          static startChildrenVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset customMetadataOffset\n           */\n\n\n          static addCustomMetadata(builder, customMetadataOffset) {\n            builder.addFieldOffset(6, customMetadataOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param Array.<flatbuffers.Offset> data\n           * @returns flatbuffers.Offset\n           */\n\n\n          static createCustomMetadataVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n\n            for (let i = data.length - 1; i >= 0; i--) {\n              builder.addOffset(data[i]);\n            }\n\n            return builder.endVector();\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n\n\n          static startCustomMetadataVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endField(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createField(builder, nameOffset, nullable, typeType, typeOffset, dictionaryOffset, childrenOffset, customMetadataOffset) {\n            Field.startField(builder);\n            Field.addName(builder, nameOffset);\n            Field.addNullable(builder, nullable);\n            Field.addTypeType(builder, typeType);\n            Field.addType(builder, typeOffset);\n            Field.addDictionary(builder, dictionaryOffset);\n            Field.addChildren(builder, childrenOffset);\n            Field.addCustomMetadata(builder, customMetadataOffset);\n            return Field.endField(builder);\n          }\n\n        }\n\n        flatbuf.Field = Field;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Buffer {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Buffer\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * The relative offset into the shared memory page where the bytes for this\n           * buffer starts\n           *\n           * @returns flatbuffers.Long\n           */\n\n\n          offset() {\n            return this.bb.readInt64(this.bb_pos);\n          }\n          /**\n           * The absolute length (in bytes) of the memory buffer. The memory is found\n           * from offset (inclusive) to offset + length (non-inclusive).\n           *\n           * @returns flatbuffers.Long\n           */\n\n\n          length() {\n            return this.bb.readInt64(this.bb_pos + 8);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Long offset\n           * @param flatbuffers.Long length\n           * @returns flatbuffers.Offset\n           */\n\n\n          static createBuffer(builder, offset, length) {\n            builder.prep(8, 16);\n            builder.writeInt64(length);\n            builder.writeInt64(offset);\n            return builder.offset();\n          }\n\n        }\n\n        flatbuf.Buffer = Buffer;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Schema {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Schema\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Schema= obj\n           * @returns Schema\n           */\n\n\n          static getRootAsSchema(bb, obj) {\n            return (obj || new Schema()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * endianness of the buffer\n           * it is Little Endian by default\n           * if endianness doesn't match the underlying system then the vectors need to be converted\n           *\n           * @returns org.apache.arrow.flatbuf.Endianness\n           */\n\n\n          endianness() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ?\n            /**  */\n            this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.Endianness.Little;\n          }\n          /**\n           * @param number index\n           * @param org.apache.arrow.flatbuf.Field= obj\n           * @returns org.apache.arrow.flatbuf.Field\n           */\n\n\n          fields(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n\n\n          fieldsLength() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param number index\n           * @param org.apache.arrow.flatbuf.KeyValue= obj\n           * @returns org.apache.arrow.flatbuf.KeyValue\n           */\n\n\n          customMetadata(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n\n\n          customMetadataLength() {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startSchema(builder) {\n            builder.startObject(3);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.Endianness endianness\n           */\n\n\n          static addEndianness(builder, endianness) {\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset fieldsOffset\n           */\n\n\n          static addFields(builder, fieldsOffset) {\n            builder.addFieldOffset(1, fieldsOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param Array.<flatbuffers.Offset> data\n           * @returns flatbuffers.Offset\n           */\n\n\n          static createFieldsVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n\n            for (let i = data.length - 1; i >= 0; i--) {\n              builder.addOffset(data[i]);\n            }\n\n            return builder.endVector();\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n\n\n          static startFieldsVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset customMetadataOffset\n           */\n\n\n          static addCustomMetadata(builder, customMetadataOffset) {\n            builder.addFieldOffset(2, customMetadataOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param Array.<flatbuffers.Offset> data\n           * @returns flatbuffers.Offset\n           */\n\n\n          static createCustomMetadataVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n\n            for (let i = data.length - 1; i >= 0; i--) {\n              builder.addOffset(data[i]);\n            }\n\n            return builder.endVector();\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n\n\n          static startCustomMetadataVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endSchema(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset offset\n           */\n\n\n          static finishSchemaBuffer(builder, offset) {\n            builder.finish(offset);\n          }\n\n          static createSchema(builder, endianness, fieldsOffset, customMetadataOffset) {\n            Schema.startSchema(builder);\n            Schema.addEndianness(builder, endianness);\n            Schema.addFields(builder, fieldsOffset);\n            Schema.addCustomMetadata(builder, customMetadataOffset);\n            return Schema.endSchema(builder);\n          }\n\n        }\n\n        flatbuf.Schema = Schema;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));","map":{"version":3,"sources":["fb/Schema.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:class-name */\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MetadataVersion {\n        /**\n         * 0.1.0\n         */\n        V1 = 0,\n\n        /**\n         * 0.2.0\n         */\n        V2 = 1,\n\n        /**\n         * 0.3.0 -> 0.7.1\n         */\n        V3 = 2,\n\n        /**\n         * >= 0.8.0\n         */\n        V4 = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum UnionMode {\n        Sparse = 0,\n        Dense = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Precision {\n        HALF = 0,\n        SINGLE = 1,\n        DOUBLE = 2\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum DateUnit {\n        DAY = 0,\n        MILLISECOND = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum TimeUnit {\n        SECOND = 0,\n        MILLISECOND = 1,\n        MICROSECOND = 2,\n        NANOSECOND = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum IntervalUnit {\n        YEAR_MONTH = 0,\n        DAY_TIME = 1\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Type {\n        NONE = 0,\n        Null = 1,\n        Int = 2,\n        FloatingPoint = 3,\n        Binary = 4,\n        Utf8 = 5,\n        Bool = 6,\n        Decimal = 7,\n        Date = 8,\n        Time = 9,\n        Timestamp = 10,\n        Interval = 11,\n        List = 12,\n        Struct_ = 13,\n        Union = 14,\n        FixedSizeBinary = 15,\n        FixedSizeList = 16,\n        Map = 17,\n        Duration = 18,\n        LargeBinary = 19,\n        LargeUtf8 = 20,\n        LargeList = 21\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Endianness {\n        Little = 0,\n        Big = 1\n    }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Null {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Null\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Null= obj\n         * @returns Null\n         */\n        static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n            return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startNull(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Null.startNull(builder);\n            return Null.endNull(builder);\n        }\n    }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Struct_ {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Struct_\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Struct_= obj\n         * @returns Struct_\n         */\n        static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n            return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startStruct_(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Struct_.startStruct_(builder);\n            return Struct_.endStruct_(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class List {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns List\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): List {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param List= obj\n         * @returns List\n         */\n        static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n            return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            List.startList(builder);\n            return List.endList(builder);\n        }\n    }\n}\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeList= obj\n         * @returns LargeList\n         */\n        static getRootAsLargeList(bb: flatbuffers.ByteBuffer, obj?: LargeList): LargeList {\n            return (obj || new LargeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeList.startLargeList(builder);\n            return LargeList.endLargeList(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeList= obj\n         * @returns FixedSizeList\n         */\n        static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n            return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of list items per value\n         *\n         * @returns number\n         */\n        listSize(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeList(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number listSize\n         */\n        static addListSize(builder: flatbuffers.Builder, listSize: number) {\n            builder.addFieldInt32(0, listSize, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeList(builder: flatbuffers.Builder, listSize: number): flatbuffers.Offset {\n            FixedSizeList.startFixedSizeList(builder);\n            FixedSizeList.addListSize(builder, listSize);\n            return FixedSizeList.endFixedSizeList(builder);\n        }\n    }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Map {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Map\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Map= obj\n         * @returns Map\n         */\n        static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n            return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Set to true if the keys within each value are sorted\n         *\n         * @returns boolean\n         */\n        keysSorted(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMap(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean keysSorted\n         */\n        static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n            builder.addFieldInt8(0, +keysSorted, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createMap(builder: flatbuffers.Builder, keysSorted: boolean): flatbuffers.Offset {\n            Map.startMap(builder);\n            Map.addKeysSorted(builder, keysSorted);\n            return Map.endMap(builder);\n        }\n    }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Union {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Union\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Union= obj\n         * @returns Union\n         */\n        static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n            return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.UnionMode\n         */\n        mode(): org.apache.arrow.flatbuf.UnionMode {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n        }\n\n        /**\n         * @param number index\n         * @returns number\n         */\n        typeIds(index: number): number | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n\n        /**\n         * @returns number\n         */\n        typeIdsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns Int32Array\n         */\n        typeIdsArray(): Int32Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUnion(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.UnionMode mode\n         */\n        static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeIdsOffset\n         */\n        static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, typeIdsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUnion(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode, typeIdsOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Union.startUnion(builder);\n            Union.addMode(builder, mode);\n            Union.addTypeIds(builder, typeIdsOffset);\n            return Union.endUnion(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Int {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Int\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Int= obj\n         * @returns Int\n         */\n        static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n            return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns boolean\n         */\n        isSigned(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInt(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(0, bitWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isSigned\n         */\n        static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n            builder.addFieldInt8(1, +isSigned, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInt(builder: flatbuffers.Builder, bitWidth: number, isSigned: boolean): flatbuffers.Offset {\n            Int.startInt(builder);\n            Int.addBitWidth(builder, bitWidth);\n            Int.addIsSigned(builder, isSigned);\n            return Int.endInt(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FloatingPoint {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FloatingPoint\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FloatingPoint= obj\n         * @returns FloatingPoint\n         */\n        static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n            return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Precision\n         */\n        precision(): org.apache.arrow.flatbuf.Precision {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFloatingPoint(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Precision precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFloatingPoint(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision): flatbuffers.Offset {\n            FloatingPoint.startFloatingPoint(builder);\n            FloatingPoint.addPrecision(builder, precision);\n            return FloatingPoint.endFloatingPoint(builder);\n        }\n    }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Utf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Utf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Utf8= obj\n         * @returns Utf8\n         */\n        static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n            return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Utf8.startUtf8(builder);\n            return Utf8.endUtf8(builder);\n        }\n    }\n}\n/**\n * Opaque binary data\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Binary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Binary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Binary= obj\n         * @returns Binary\n         */\n        static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n            return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Binary.startBinary(builder);\n            return Binary.endBinary(builder);\n        }\n    }\n}\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeUtf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeUtf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeUtf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeUtf8= obj\n         * @returns LargeUtf8\n         */\n        static getRootAsLargeUtf8(bb: flatbuffers.ByteBuffer, obj?: LargeUtf8): LargeUtf8 {\n            return (obj || new LargeUtf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeUtf8.startLargeUtf8(builder);\n            return LargeUtf8.endLargeUtf8(builder);\n        }\n    }\n}\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeBinary= obj\n         * @returns LargeBinary\n         */\n        static getRootAsLargeBinary(bb: flatbuffers.ByteBuffer, obj?: LargeBinary): LargeBinary {\n            return (obj || new LargeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeBinary.startLargeBinary(builder);\n            return LargeBinary.endLargeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeBinary= obj\n         * @returns FixedSizeBinary\n         */\n        static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n            return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of bytes per value\n         *\n         * @returns number\n         */\n        byteWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number byteWidth\n         */\n        static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n            builder.addFieldInt32(0, byteWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeBinary(builder: flatbuffers.Builder, byteWidth: number): flatbuffers.Offset {\n            FixedSizeBinary.startFixedSizeBinary(builder);\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\n            return FixedSizeBinary.endFixedSizeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Bool {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Bool\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Bool= obj\n         * @returns Bool\n         */\n        static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n            return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBool(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Bool.startBool(builder);\n            return Bool.endBool(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Decimal {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Decimal\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Decimal= obj\n         * @returns Decimal\n         */\n        static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n            return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Total number of decimal digits\n         *\n         * @returns number\n         */\n        precision(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Number of digits after the decimal point \".\"\n         *\n         * @returns number\n         */\n        scale(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDecimal(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: number) {\n            builder.addFieldInt32(0, precision, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number scale\n         */\n        static addScale(builder: flatbuffers.Builder, scale: number) {\n            builder.addFieldInt32(1, scale, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDecimal(builder: flatbuffers.Builder, precision: number, scale: number): flatbuffers.Offset {\n            Decimal.startDecimal(builder);\n            Decimal.addPrecision(builder, precision);\n            Decimal.addScale(builder, scale);\n            return Decimal.endDecimal(builder);\n        }\n    }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Date {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Date\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Date= obj\n         * @returns Date\n         */\n        static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n            return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.DateUnit\n         */\n        unit(): org.apache.arrow.flatbuf.DateUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDate(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.DateUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDate(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit): flatbuffers.Offset {\n            Date.startDate(builder);\n            Date.addUnit(builder, unit);\n            return Date.endDate(builder);\n        }\n    }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Time {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Time\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Time= obj\n         * @returns Time\n         */\n        static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n            return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTime(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(1, bitWidth, 32);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTime(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, bitWidth: number): flatbuffers.Offset {\n            Time.startTime(builder);\n            Time.addUnit(builder, unit);\n            Time.addBitWidth(builder, bitWidth);\n            return Time.endTime(builder);\n        }\n    }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Timestamp {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Timestamp\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Timestamp= obj\n         * @returns Timestamp\n         */\n        static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n            return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n        }\n\n        /**\n         * The time zone is a string indicating the name of a time zone, one of:\n         *\n         * * As used in the Olson time zone database (the \"tz database\" or\n         *   \"tzdata\"), such as \"America/New_York\"\n         * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n         *\n         * Whether a timezone string is present indicates different semantics about\n         * the data:\n         *\n         * * If the time zone is null or equal to an empty string, the data is \"time\n         *   zone naive\" and shall be displayed *as is* to the user, not localized\n         *   to the locale of the user. This data can be though of as UTC but\n         *   without having \"UTC\" as the time zone, it is not considered to be\n         *   localized to any time zone\n         *\n         * * If the time zone is set to a valid value, values can be displayed as\n         *   \"localized\" to that time zone, even though the underlying 64-bit\n         *   integers are identical to the same data stored in UTC. Converting\n         *   between time zones is a metadata-only operation and does not change the\n         *   underlying values\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        timezone(): string | null;\n        timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        timezone(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTimestamp(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset timezoneOffset\n         */\n        static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, timezoneOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTimestamp(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, timezoneOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Timestamp.startTimestamp(builder);\n            Timestamp.addUnit(builder, unit);\n            Timestamp.addTimezone(builder, timezoneOffset);\n            return Timestamp.endTimestamp(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Interval {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Interval\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Interval= obj\n         * @returns Interval\n         */\n        static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n            return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.IntervalUnit\n         */\n        unit(): org.apache.arrow.flatbuf.IntervalUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInterval(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.IntervalUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInterval(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit): flatbuffers.Offset {\n            Interval.startInterval(builder);\n            Interval.addUnit(builder, unit);\n            return Interval.endInterval(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Duration {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Duration\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Duration {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Duration= obj\n         * @returns Duration\n         */\n        static getRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\n            return (obj || new Duration).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDuration(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDuration(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDuration(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit): flatbuffers.Offset {\n            Duration.startDuration(builder);\n            Duration.addUnit(builder, unit);\n            return Duration.endDuration(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class KeyValue {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns KeyValue\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param KeyValue= obj\n         * @returns KeyValue\n         */\n        static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n            return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        key(): string | null;\n        key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        key(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        value(): string | null;\n        value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        value(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startKeyValue(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset keyOffset\n         */\n        static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, keyOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset valueOffset\n         */\n        static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, valueOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createKeyValue(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n            KeyValue.startKeyValue(builder);\n            KeyValue.addKey(builder, keyOffset);\n            KeyValue.addValue(builder, valueOffset);\n            return KeyValue.endKeyValue(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryEncoding {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryEncoding\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryEncoding= obj\n         * @returns DictionaryEncoding\n         */\n        static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n            return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * The known dictionary id in the application where this data is used. In\n         * the file or streaming formats, the dictionary ids are found in the\n         * DictionaryBatch messages\n         *\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * The dictionary indices are constrained to be positive integers. If this\n         * field is null, the indices must be signed int32\n         *\n         * @param org.apache.arrow.flatbuf.Int= obj\n         * @returns org.apache.arrow.flatbuf.Int|null\n         */\n        indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * By default, dictionaries are not ordered, or the order does not have\n         * semantic meaning. In some statistical, applications, dictionary-encoding\n         * is used to represent ordered categorical data, and we provide a way to\n         * preserve that metadata here\n         *\n         * @returns boolean\n         */\n        isOrdered(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryEncoding(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset indexTypeOffset\n         */\n        static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, indexTypeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isOrdered\n         */\n        static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n            builder.addFieldInt8(2, +isOrdered, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryEncoding(builder: flatbuffers.Builder, id: flatbuffers.Long, indexTypeOffset: flatbuffers.Offset, isOrdered: boolean): flatbuffers.Offset {\n            DictionaryEncoding.startDictionaryEncoding(builder);\n            DictionaryEncoding.addId(builder, id);\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\n            return DictionaryEncoding.endDictionaryEncoding(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Field {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Field\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Field= obj\n         * @returns Field\n         */\n        static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n            return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Name is not required, in i.e. a List\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        name(): string | null;\n        name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        name(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * Whether or not this field can contain nulls. Should be true in general.\n         *\n         * @returns boolean\n         */\n        nullable(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Type\n         */\n        typeType(): org.apache.arrow.flatbuf.Type {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n        }\n\n        /**\n         * This is the type of the decoded value if the field is dictionary encoded.\n         *\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        type<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * Present only if the field is dictionary encoded.\n         *\n         * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n         * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n         */\n        dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * children apply only to nested data types like Struct, List and Union. For\n         * primitive types children will have length 0.\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        childrenLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * User-defined metadata\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startField(builder: flatbuffers.Builder) {\n            builder.startObject(7);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nameOffset\n         */\n        static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, nameOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean nullable\n         */\n        static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n            builder.addFieldInt8(1, +nullable, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Type typeType\n         */\n        static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeOffset\n         */\n        static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, typeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionaryOffset\n         */\n        static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, dictionaryOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset childrenOffset\n         */\n        static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(5, childrenOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(6, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createField(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, nullable: boolean, typeType: org.apache.arrow.flatbuf.Type, typeOffset: flatbuffers.Offset, dictionaryOffset: flatbuffers.Offset, childrenOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Field.startField(builder);\n            Field.addName(builder, nameOffset);\n            Field.addNullable(builder, nullable);\n            Field.addTypeType(builder, typeType);\n            Field.addType(builder, typeOffset);\n            Field.addDictionary(builder, dictionaryOffset);\n            Field.addChildren(builder, childrenOffset);\n            Field.addCustomMetadata(builder, customMetadataOffset);\n            return Field.endField(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Buffer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Buffer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The relative offset into the shared memory page where the bytes for this\n         * buffer starts\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The absolute length (in bytes) of the memory buffer. The memory is found\n         * from offset (inclusive) to offset + length (non-inclusive).\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param flatbuffers.Long length\n         * @returns flatbuffers.Offset\n         */\n        static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(length);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Schema {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Schema\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Schema= obj\n         * @returns Schema\n         */\n        static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n            return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * endianness of the buffer\n         * it is Little Endian by default\n         * if endianness doesn't match the underlying system then the vectors need to be converted\n         *\n         * @returns org.apache.arrow.flatbuf.Endianness\n         */\n        endianness(): org.apache.arrow.flatbuf.Endianness {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        fieldsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startSchema(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Endianness endianness\n         */\n        static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset fieldsOffset\n         */\n        static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, fieldsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createSchema(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness, fieldsOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Schema.startSchema(builder);\n            Schema.addEndianness(builder, endianness);\n            Schema.addFields(builder, fieldsOffset);\n            Schema.addCustomMetadata(builder, customMetadataOffset);\n            return Schema.endSchema(builder);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}