{"version":3,"sources":["XMIApp.tsx","index.tsx"],"names":["XMIApp","state","numClicks","isFocused","uploadedFile","render","props","args","theme","style","borderStyling","primaryColor","border","outline","onClicked","setState","prevState","Streamlit","setComponentValue","_onFocus","_onBlur","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"0PAiBMA,E,4MACGC,MAAQ,CAAEC,UAAW,EAAGC,WAAW,EAAOC,aAAc,M,EACxDC,OAAS,WAGD,EAAKC,MAAMC,KAAX,KACA,EAAKD,MAAMC,KAAX,KACG,EAAKD,MAAMC,KAAX,QAFhB,IAOQC,EAAU,EAAKF,MAAfE,MACFC,EAA6B,GAInC,GAAID,EAAO,CAGT,IAAME,EAAa,oBACjB,EAAKT,MAAME,UAAYK,EAAMG,aAAe,QAE9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAQlB,OACA,8BACI,6BACA,+B,EAOEI,UAAY,WAGlB,EAAKC,UACH,SAAAC,GAAS,MAAK,CAAEd,UAAWc,EAAUd,UAAY,MACjD,kBAAMe,IAAUC,kBAAkB,EAAKjB,MAAMC,e,EAKzCiB,SAAW,WACjB,EAAKJ,SAAS,CAAEZ,WAAW,K,EAIrBiB,QAAU,WAChB,EAAKL,SAAS,CAAEZ,WAAW,K,YA1DVkB,KAmENC,cAAwBtB,GChFvCuB,IAASlB,OACP,kBAAC,IAAMmB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.1886b8e6.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n * run with npm run start\n */\nclass XMIApp extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false, uploadedFile: null}\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n    const type = this.props.args[\"type\"]\n    const content = this.props.args[\"content\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    //Access variables like this:\n    //The file name is: {name} <br></br>\n    //   The file type is: {type} <br></br>\n    //    The content is: <div dangerouslySetInnerHTML={{__html: content}} />\n\n    return (\n    <span>\n        <br></br>\n        <br></br>\n    </span>\n\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(XMIApp)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport XMIApp from \"./XMIApp\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <XMIApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}